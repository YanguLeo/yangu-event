(function (_window, _document) {
// Loader script to replace tagmanager script loading
// Used in script like:
// <script src="https://trjs.mediafin.be/loader/trmfn-loader.js" data-env="prod" data-app="mediafin"></script>
  let _tracker_loader_script = _document.currentScript;
  if (!_tracker_loader_script) {
    _tracker_loader_script = _document.querySelector('script[src="https://trjs.mediafin.be/loader/trmfn-loader.js"]');
  }
  if (!_tracker_loader_script) {
    _tracker_loader_script = _document.querySelector('script[src="https://trjs.acceptance.mediafin.be/loader/trmfn-loader.js"]');
  }
  //deprecated since cookie domain taken based on URL
  //const _tracker_site = _tracker_loader_script.getAttribute("data-site") || "tijd";
  const _tracker_app_id = _tracker_loader_script.getAttribute("data-app") || "mediafin";
  const _tracker_env = _tracker_loader_script.getAttribute("data-env") || "production";
  const _tracker_cookie_domain = "." + _document.URL.split('/')[2].split('.').splice(1).join('.');
  let _tracker_server = "tr.mediafin.be";
  let _tracker_server_js = "trjs.mediafin.be";
  let _tracker_retryCounter = 0;
  const _tracker_maxRetries = Number(_tracker_loader_script.getAttribute("data-max-retries") || "6");
  const _tracker_retryWaitTime = 500;
  const didomiSnowploVendorId = 'c:snowplow-j3h8wAeF';
  const _spStorageKey = "_sp_storage";
  const sessionIdQueryParam = '_sp_ses=';
  const adBlockTestUrl = "https://pool-mediafin.adhese.com/tag/tag-v3.js";
  let debugEnabled = true;

  if (["acceptance", "acc", "test", "tst"].indexOf(_tracker_env.toLowerCase()) >= 0) {
    _tracker_server = "tr.acceptance.mediafin.be";
    _tracker_server_js = "trjs.acceptance.mediafin.be";
    debugEnabled = true;
  }

  function getCookieValue(cookieName) {
    if (typeof _document.cookie !== "string") return undefined;
    return _document.cookie.split(";")
      .filter(function (el) {
        return typeof el === "string";
      })
      .map(function (el) {
        return el.trim();
      })
      .filter(function (el) {
        return el.indexOf(cookieName) === 0;
      })
      .map(function (el) {
        return el.replace(cookieName + "=", "");
      })
      .shift();
  }

  function getTrackingUserId() {
    function decodeHexString(hex) {
      let str = "";
      for (let i = 0; i < hex.length; i += 2) {
        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
      }
      return str;
    }

    try {
      const userCookie = getCookieValue("mediafinUser");
      if (!!userCookie) {
        return JSON.parse(decodeHexString(userCookie)).userId;
      }
    } catch (e) {
      console.error(e);
      return undefined;
    }
  }

  function createUserContext() {
    const userContext = {schema: "iglu:be.mediafin.user/context/jsonschema/1-0-0", data: {}};
    const _uuid = getCookieValue("uuid");
    const _ftuuid = getCookieValue("ftuuid");
    if (!!_uuid) {
      userContext.data.uuid = "" + _uuid;
    } else if (!!_ftuuid) {
      userContext.data.uuid = "" + _ftuuid;
    }
    const _userid = getTrackingUserId();
    if (!!_userid) userContext.data.userId = "" + _userid;

    if (typeof digitalData !== "undefined") {
      if (digitalData.serverInfo) {
        if (digitalData.serverInfo.subscriptionType && digitalData.serverInfo.subscriptionType.id) {
          userContext.data.subscriptionType = "" + digitalData.serverInfo.subscriptionType.id;
        }
        if (digitalData.serverInfo.usageType && digitalData.serverInfo.usageType.id) {
          userContext.data.usageType = "" + digitalData.serverInfo.usageType.id;
        }
      }
    }
    if (!userContext.data.usageType) {
      const _userType = getCookieValue("userType");
      switch (_userType) {
        case 'subscriber':
          userContext.data.usageType = "5";
          break;
        case 'visitor':
          userContext.data.usageType = "3";
          break;
        case 'guest':
          userContext.data.usageType = "1";
          break;
      }
    }
    return userContext;
  }

  function createAssetContext() {
    const assetContext = {schema: "iglu:be.mediafin.asset/context/jsonschema/1-0-0", data: {}};
    if (typeof digitalData !== "undefined") {
      if (digitalData.page) {
        if (digitalData.page.category) {
          assetContext.data.pageCategory = digitalData.page.category.primaryCategory;
        }
        if (digitalData.page.pageInfo) {
          assetContext.data.assetId = digitalData.page.pageInfo.name;
          assetContext.data.creationDate = digitalData.page.pageInfo.creationDate;
          assetContext.data.publishedDate = digitalData.page.pageInfo.publishedDate;
          assetContext.data.agency = digitalData.page.pageInfo.agency;
          if (digitalData.page.pageInfo.pageKey) {
            assetContext.data.pageKey = digitalData.page.pageInfo.pageKey.biKey;
          }
          if (digitalData.page.pageInfo.section) {
            assetContext.data.section = "" + digitalData.page.pageInfo.section;
          }
          if (digitalData.page.pageInfo.node) {
            assetContext.data.node = "" + digitalData.page.pageInfo.node;
          }
        }
        if (digitalData.page.attributes) {
          if (digitalData.page.attributes.assetType) {
            assetContext.data.assetType = "" + digitalData.page.attributes.assetType;
          }
          if (digitalData.page.attributes.accessType && digitalData.page.attributes.accessType.id) {
            assetContext.data.accessType = "" + digitalData.page.attributes.accessType.id;
          }
        }
      }
    }
    return assetContext;
  }

  function initTracker(sessionIdForCookieLess) {
    const _spStorage = localStorage.getItem(_spStorageKey) || "cookieAndLocalStorage";
    if (debugEnabled) console.log('trmfnloader: New sp with storage', _spStorage, 'and sessionIdForCookieLess', sessionIdForCookieLess);
    _window.trmfn("newTracker", "trmfn", _tracker_server, { // Initialise a tracker
      appId: _tracker_app_id,
      cookieDomain: _tracker_cookie_domain,
      skippedBrowserFeatures: ['res', 'qt', 'realp', 'wma', 'dir', 'fla', 'java', 'gears', 'ag'],
      stateStorageStrategy: _spStorage,
      postPath: '/be.mediafin/v2',
      contexts: {webPage: true, performanceTiming: true, gaCookies: true, geolocation: false, forceSecureTracker: true}
    });
    _window.trmfn("setUserId", getTrackingUserId());
    _window.trmfn('enableLinkClickTracking');
    //cookieless mode and no query param present: make sure to attach the session ID so we can also link the very first page view
    if (_spStorage === 'none' && _document.documentURI.indexOf(sessionIdQueryParam) < 0) {
      const customUrl = attachSessionIdToLink(_document.documentURI, sessionIdForCookieLess);
      _window.trmfn("setCustomUrl", customUrl);
    }
  }

  function trackPageView() {
    const assetContext = createAssetContext();
    const userContext = createUserContext();
    if (!userContext.data.subscriptionType && _tracker_retryCounter < _tracker_maxRetries) {
      _window.setTimeout(trackPageView, _tracker_retryWaitTime);
      _tracker_retryCounter++;
      return;
    }
    _window.trmfn("trackPageView",
      null, // no custom title
      [assetContext, userContext] // array of custom contexts
    );
  }

  /**
   * For some reason, this does not work: snowplow('clearUserData');
   */
  function clearCookiesAndLocalStorage() {
    _window.trmfn(function () {
      const sp = this.trmfn;
      const idCookieName = sp.getCookieName('id');
      const sesCookieName = sp.getCookieName('ses');
      if (debugEnabled) console.log('trmfnloader: Clearing cookies', idCookieName, sesCookieName, _tracker_cookie_domain);
      document.cookie = idCookieName + "=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;Domain=" + _tracker_cookie_domain;
      document.cookie = sesCookieName + "=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;Domain=" + _tracker_cookie_domain;
      localStorage.removeItem("snowplowOutQueue_trmfn_trmfn_post2");
      localStorage.removeItem("snowplowOutQueue_trmfn_trmfn_post2.expires");

      //remove deprecated cookie, was set by collector server but never used
      document.cookie = "mfn_sp=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;Domain=" + _tracker_cookie_domain;
    });
  }

  function setupDidomiListener(sessionId) {
    if (_window.Didomi && _window.Didomi.getObservableOnUserConsentStatusForVendor) {
      if (debugEnabled) console.log('trmfnloader: Didomi sp listener setup');
      _window.Didomi.getObservableOnUserConsentStatusForVendor(didomiSnowploVendorId)
        .subscribe(function (consentStatus) {
          if (debugEnabled) console.log('trmfnloader: Didomi sp consent status', consentStatus);
          const _spStorage = consentStatus ? "cookieAndLocalStorage" : "none";
          localStorage.setItem(_spStorageKey, _spStorage);
          if (consentStatus === false) {
            //allow all content to render and add sessionid to anchor URLs
            _window.setTimeout(attachSessionIdToAllLinks, 1000, sessionId);
            clearCookiesAndLocalStorage();
          }
        });
    } else {
      _window.setTimeout(setupDidomiListener, 500, sessionId);
    }
  }

  function createUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }

  /**
   * Use current session ID if it exists or else a new one is generated.
   * In case a sessionID is found on the URL that one overrides all others.
   * @param currentSessionId
   * @returns session ID to use
   */
  function getSessionIdForCookieLessTracking(currentSessionId) {
    let sessionIdToUse;
    const sessionIdPrefixIndex = _document.documentURI.indexOf(sessionIdQueryParam);
    if (sessionIdPrefixIndex > 0) {
      let derivedSessionId = _document.documentURI.substring(sessionIdPrefixIndex + sessionIdQueryParam.length);
      const separatorIndex = derivedSessionId.indexOf('&');
      sessionIdToUse = (separatorIndex > 0) ? derivedSessionId.substring(0, separatorIndex) : derivedSessionId;
    } else {
      sessionIdToUse = currentSessionId || createUUID();
    }
    return sessionIdToUse;
  }

  function attachSessionIdToLink(link, sessionId) {
    const concatSign = (link.indexOf('?') >= 0) ? '&' : '?';
    return link + concatSign + sessionIdQueryParam + sessionId;
  }

  function attachSessionIdToAllLinks(currentSessionId) {
    const sessionIdToUse = getSessionIdForCookieLessTracking(currentSessionId);
    const nodeListOfAnchors = _document.querySelectorAll('a');
    const urlPrefixScope = _document.documentURI.substring(0, 15);
    if (debugEnabled) console.log("Cookieless mode, add sessionid to links", sessionIdToUse, "SP current sessionId", currentSessionId, "total nr anchors", nodeListOfAnchors.length);
    nodeListOfAnchors
      .forEach(function (node) {
        const href = node.href || '';
        if (href.indexOf(urlPrefixScope) === 0) {
          node.href = attachSessionIdToLink(href, sessionIdToUse);
        }
      });
  }

  function checkAdBlocker() {
    const httpRequest = new XMLHttpRequest();

    function alertContents() {
      if (httpRequest.readyState === XMLHttpRequest.DONE) {
        if (httpRequest.status === 200) {
          if (debugEnabled) console.log('trmfnloader: No ad blocker found');
          if (sessionStorage.getItem("adblock") !== "not found") {
            sessionStorage.setItem("adblock", "not found");
            _window.trmfn("trackStructEvent", 'adBlocker', 'detection', 'not found');
          }
        } else {
          if (debugEnabled) console.log('trmfnloader: ad blocker found');
          if (sessionStorage.getItem("adblock") !== "found") {
            sessionStorage.setItem("adblock", "found");
            _window.trmfn("trackStructEvent", 'adBlocker', 'detection', 'found');
          }
        }
      }

    }

    httpRequest.onreadystatechange = alertContents;
    httpRequest.open('GET', adBlockTestUrl);
    httpRequest.send();
  }

  (function (p, l, o, w, i, n, g) {
    if (!p[i]) {
      p.GlobalSnowplowNamespace = p.GlobalSnowplowNamespace || [];
      p.GlobalSnowplowNamespace.push(i);
      p[i] = function () {
        (p[i].q = p[i].q || []).push(arguments);
      };
      p[i].q = p[i].q || [];
      n = l.createElement(o);
      g = l.getElementsByTagName(o)[0];
      n.async = 1;
      n.src = w;
      g.parentNode.insertBefore(n, g);
    }
  }(_window, _document, "script", "https://" + _tracker_server_js + "/2.15.0/trmfn.js", "trmfn"));
  //make this method available publicly, used in abo flow
  _window.createUserContext = createUserContext;

  //init tracker and start tracking
  const sessionIdForCookieLess = getSessionIdForCookieLessTracking();
  initTracker(sessionIdForCookieLess);
  setupDidomiListener(sessionIdForCookieLess);
  _window.setTimeout(trackPageView, _tracker_retryWaitTime);
  checkAdBlocker();
}(window, document));
